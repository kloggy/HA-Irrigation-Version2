
#===================
#=== Input Booleans
#===================
input_boolean:

  irrigation_testing_mode:
    name: Irrigation Testing Mode
    icon: mdi:alert-outline

  irrigation_disable_switches:
    name: Disable Switches 
    icon: mdi:electric-switch


#================
#=== Input Texts
#================
input_text:

  irrigation_current_status:
    name: Irrigation Status
    min: 0
    max: 100 

  irrigation_previous_run_cycle_name:
    name: Irrigation Previous Run Cycle
    min: 0
    max: 30
    
  irrigation_previous_run_date:
    name: Irrigation Previous Run Date
    min: 0
    max: 30

  irrigation_previous_run_time:
    name: Irrigation Previous Run Time
    min: 0
    max: 30

  irrigation_previous_total_watering_time:
    name: Irrigation Previous Total Watering Time
    min: 0
    max: 10

  irrigation_ui_font_family:
    name: Irrigation UI font family
    min: 0
    max: 30
    icon: mdi:format-font


#==================
#=== Input Numbers
#==================
input_number:

  irrigation_pause_between_zones_in_seconds: 
    name: Pause Between Zones In Seconds
    min: 3
    max: 15
    step: 1
    mode: box
    unit_of_measurement: secs
    icon: mdi:timer-outline

  irrigation_weather_adjusted_minimum_duration_in_seconds: 
    name: Minimum Duration After Weather Adjustment In Seconds
    min: 3
    max: 1800 # 30 minutes
    step: 1
    mode: box
    unit_of_measurement: secs
    icon: mdi:timer-sand-empty

  irrigation_weather_adjusted_maximum_duration_in_minutes: 
    name: Maximum Duration After Weather Adjustment In Minutes
    min: 1
    max: 120
    step: 1
    mode: box
    unit_of_measurement: mins
    icon: mdi:timer-sand-full

  irrigation_failsafe_time_in_seconds:
    name: Failsafe Time in Seconds
    min: 1
    max: 7260 # 2 hours and 1 minute
    mode: box
    unit_of_measurement: sec
    icon: mdi:timer-outline


#==============
#=== Templates
#==============
template:
  #=== Indicate if a cycle is scheduled to start before another will finish
  - binary_sensor:
      - name: Irrigation Cycle Start Clash
        unique_id: irrigation_cycle_start_clash
        state: >
          {% set c1_start = states('sensor.irrigation_cycle1_start_time_in_seconds') | int(0) %}
          {% set c1_duration = states('sensor.irrigation_cycle1_duration_in_seconds') | int(0) %}
          {% set c1_end = c1_start + c1_duration %}
          {% set c2_start = states('sensor.irrigation_cycle2_start_time_in_seconds') | int(0) %}
          {% set c2_duration = states('sensor.irrigation_cycle2_duration_in_seconds') | int(0) %}
          {% set c2_end = c2_start + c2_duration %}

          {% if is_state('input_boolean.irrigation_cycle1_schedule_enabled', 'on') and
                is_state('input_boolean.irrigation_cycle2_schedule_enabled', 'on') %}
            {% if (c1_start - c2_start) | abs <= 60 %}
              true
            {% elif c1_start < c2_start and
                    c1_end > (c2_start - 60) %}
              true
            {% elif c2_start < c1_start and
                    c2_end > (c1_start - 60) %}
              true
            {% else %}
              false
            {% endif %}
          {% else %}
            false
          {% endif %}
        attributes:
          clash_text: >
            {% set c1_start = states('sensor.irrigation_cycle1_start_time_in_seconds') | int(0) %}
            {% set c1_duration = states('sensor.irrigation_cycle1_duration_in_seconds') | int(0) %}
            {% set c1_end = c1_start + c1_duration %}
            {% set c2_start = states('sensor.irrigation_cycle2_start_time_in_seconds') | int(0) %}
            {% set c2_duration = states('sensor.irrigation_cycle2_duration_in_seconds') | int(0) %}
            {% set c2_end = c2_start + c2_duration %}
            {% set c1_name = states('input_text.irrigation_cycle1_name') %}
            {% set c2_name = states('input_text.irrigation_cycle2_name') %}

            {# NOTE that a 1 minute gap between cycles is required #}
            {% if (c1_start - c2_start) | abs <= 60 %}
              You have set {{ c1_name }} to start at the same time as {{ c2_name }}.
            {% elif c1_start < c2_start and
                    c1_end > (c2_start - 60) %}
              You have set {{ c2_name }} to start before {{ c1_name }} has ended.<br><br>{{ c2_name }} will not run.
            {% elif c2_start < c1_start and
                    c2_end > (c1_start - 60) %}
              You have set {{ c1_name }} to start before {{ c2_name }} has ended.<br><br>{{ c1_name }} will not run.
            {% else %}
              No timing errors found! Please check code...
            {% endif %}
        availability: >
          {% set temp_sensors = expand(
            "sensor.irrigation_cycle1_start_time_in_seconds",
            "sensor.irrigation_cycle1_duration_in_seconds",
            "sensor.irrigation_cycle2_start_time_in_seconds",
            "sensor.irrigation_cycle2_duration_in_seconds",
          ) %}
          {{ temp_sensors | selectattr('state','in', ['unknown','unavailable'])
                          | list
                          | length != (temp_sensors | count) }}


  #=== Next Scheduled Run - used on Status Page
  - sensor:
      - name: Irrigation Next Run
        unique_id: irrigation_next_run
        state: >
          {% if is_state('input_boolean.irrigation_master_control_switch', 'off') %}
            SYSTEM IS OFF
          {% else %}
            {% set day_today = as_timestamp(now()) | timestamp_custom('%a') | lower %}
            {% set day_tomorrow = as_timestamp(now() + timedelta(days=1)) | timestamp_custom('%a') | lower %}
            {% set number_of_zones = states('input_number.irrigation_number_of_zones') | int %}

            {% set ns = namespace(cycle1_runs_today = false,
                                  cycle1_runs_tomorrow = false,
                                  cycle2_runs_today = false,
                                  cycle2_runs_tomorrow = false) %}

            {% for zone in range(number_of_zones) %}

              {% set cycle1_zone_duration = states('input_number.irrigation_cycle1_zone' ~ (zone + 1) ~ '_duration') %}
              {% set cycle1_zone_runs_every_day = states('input_boolean.irrigation_cycle1_zone' ~ (zone + 1) ~ '_every_day') %} 
              {% set cycle1_zone_runs_today = states('input_boolean.irrigation_cycle1_zone' ~ (zone + 1) ~ '_' ~ day_today) %}
              {% set cycle1_zone_runs_tomorrow = states('input_boolean.irrigation_cycle1_zone' ~ (zone + 1) ~ '_' ~ day_tomorrow) %}

              {% set cycle2_zone_duration = states('input_number.irrigation_cycle2_zone' ~ (zone + 1) ~ '_duration') %}
              {% set cycle2_zone_runs_every_day = states('input_boolean.irrigation_cycle2_zone' ~ (zone + 1) ~ '_every_day') %} 
              {% set cycle2_zone_runs_today = states('input_boolean.irrigation_cycle2_zone' ~ (zone + 1) ~ '_' ~ day_today) %}
              {% set cycle2_zone_runs_tomorrow = states('input_boolean.irrigation_cycle2_zone' ~ (zone + 1) ~ '_' ~ day_tomorrow) %}

              {% if cycle1_zone_duration != '0.0'  and
                    (cycle1_zone_runs_every_day == 'on' or 
                    cycle1_zone_runs_today == 'on') %}
                {% set ns.cycle1_runs_today = true %}
              {% endif %}

              {% if cycle2_zone_duration != '0.0'  and
                    (cycle2_zone_runs_every_day == 'on' or 
                    cycle2_zone_runs_today == 'on') %}
                {% set ns.cycle2_runs_today = true %}
              {% endif %}

              {% if cycle1_zone_duration != '0.0'  and
                    (cycle1_zone_runs_every_day == 'on' or 
                    cycle1_zone_runs_tomorrow == 'on') %}
                {% set ns.cycle1_runs_tomorrow = true %}
              {% endif %}

              {% if cycle2_zone_duration != '0.0'  and
                    (cycle2_zone_runs_every_day == 'on' or 
                    cycle2_zone_runs_tomorrow == 'on') %}
                {% set ns.cycle2_runs_tomorrow = true %}
              {% endif %}

            {% endfor %}

            {% set time_now = states('sensor.time') %}
            {% set cycle1_schedule_enabled = states('input_boolean.irrigation_cycle1_schedule_enabled') %}
            {% set cycle2_schedule_enabled = states('input_boolean.irrigation_cycle2_schedule_enabled') %}
            {% set cycle1_start_time = states('input_datetime.irrigation_cycle1_start_time')[0:5] %}
            {% set cycle2_start_time = states('input_datetime.irrigation_cycle2_start_time')[0:5] %}
            {% set cycle1_name = states('input_text.irrigation_cycle1_name') %}
            {% set cycle2_name = states('input_text.irrigation_cycle2_name') %}
            {% set cycle3_name = states('input_text.irrigation_cycle3_name') %}

            {% set cycle1_running = states('input_boolean.irrigation_cycle1_running') %}
            {% set cycle2_running = states('input_boolean.irrigation_cycle2_running') %}
            {% set cycle3_running = states('input_boolean.irrigation_cycle3_running') %}

            {% if cycle1_running == 'on' %}
              {{ cycle1_name ~ ' cycle' }}
            {% elif cycle2_running == 'on' %}
              {{ cycle2_name ~ ' cycle' }}
            {% elif cycle3_running == 'on' %}
              {{ cycle3_name ~ ' cycle' }}
            {% elif cycle1_schedule_enabled == 'on' and
                    ns.cycle1_runs_today and
                    cycle1_start_time > time_now %}
              {{ cycle1_name + ' cycle at ' + cycle1_start_time }}
            {% elif cycle2_schedule_enabled == 'on' and
                    ns.cycle2_runs_today and
                    cycle2_start_time > time_now %}
              {{ cycle2_name + ' cycle at ' + cycle2_start_time }}
            {% elif cycle1_schedule_enabled == 'on' and
                    ns.cycle1_runs_tomorrow %}
              {{ 'Tomorrow at ' + cycle1_start_time }}
            {% elif cycle2_schedule_enabled == 'on' and
                    ns.cycle2_runs_tomorrow %}
              {{ 'Tomorrow at ' + cycle2_start_time }}
            {% else %}
              NO SCHEDULE TODAY OR TOMORROW
            {% endif %}
          {% endif %}


        # state: >
        #   {% if is_state('input_boolean.irrigation_master_control_switch', 'off') %}
        #     SYSTEM IS OFF
        #   {% else %}
        #     {% set day_today = as_timestamp(now()) | timestamp_custom('%a') | lower %}
        #     {% set day_tomorrow = as_timestamp(now() + timedelta(days=1)) | timestamp_custom('%a') | lower %}

        #     {% if is_state('group.irrigation_group_cycle1_every_day', 'on') or
        #           is_state('group.irrigation_group_cycle1_' + day_today, 'on') %}
        #       {% set cycle1_runs_today = true %}
        #     {% else %}
        #       {% set cycle1_runs_today = false %}
        #     {% endif %}

        #     {% if is_state('group.irrigation_group_cycle2_every_day', 'on') or
        #           is_state('group.irrigation_group_cycle2_' + day_today, 'on') %}
        #       {% set cycle2_runs_today = true %}
        #     {% else %}
        #       {% set cycle2_runs_today = false %}
        #     {% endif %}

        #     {% if is_state('group.irrigation_group_cycle1_every_day', 'on') or
        #           is_state('group.irrigation_group_cycle1_' + day_tomorrow, 'on') %}
        #       {% set cycle1_runs_tomorrow = true %}
        #     {% else %}
        #       {% set cycle1_runs_tomorrow = false %}
        #     {% endif %}

        #     {% if is_state('group.irrigation_group_cycle2_every_day', 'on') or
        #           is_state('group.irrigation_group_cycle2_' + day_tomorrow, 'on') %}
        #       {% set cycle2_runs_tomorrow = true %}
        #     {% else %}
        #       {% set cycle2_runs_tomorrow = false %}
        #     {% endif %}

        #     {% set time_now = states('sensor.time') %}
        #     {% set cycle1_schedule_enabled = states('input_boolean.irrigation_cycle1_schedule_enabled') %}
        #     {% set cycle2_schedule_enabled = states('input_boolean.irrigation_cycle2_schedule_enabled') %}
        #     {% set cycle1_start_time = states('input_datetime.irrigation_cycle1_start_time')[0:5] %}
        #     {% set cycle2_start_time = states('input_datetime.irrigation_cycle2_start_time')[0:5] %}
        #     {% set cycle1_name = states('input_text.irrigation_cycle1_name') %}
        #     {% set cycle2_name = states('input_text.irrigation_cycle2_name') %}
        #     {% set cycle3_name = states('input_text.irrigation_cycle3_name') %}

        #     {% set cycle1_running = states('input_boolean.irrigation_cycle1_running') %}
        #     {% set cycle2_running = states('input_boolean.irrigation_cycle2_running') %}
        #     {% set cycle3_running = states('input_boolean.irrigation_cycle3_running') %}

        #     {% if cycle1_running == 'on' %}
        #       {{ cycle1_name ~ ' cycle' }}
        #     {% elif cycle2_running == 'on' %}
        #       {{ cycle2_name ~ ' cycle' }}
        #     {% elif cycle3_running == 'on' %}
        #       {{ cycle3_name ~ ' cycle' }}
        #     {% elif cycle1_schedule_enabled == 'on' and
        #             cycle1_runs_today and
        #             cycle1_start_time > time_now %}
        #       {{ cycle1_name + ' cycle at ' + cycle1_start_time }}
        #     {% elif cycle2_schedule_enabled == 'on' and
        #             cycle2_runs_today and
        #             cycle2_start_time > time_now %}
        #       {{ cycle2_name + ' cycle at ' + cycle2_start_time }}
        #     {% elif cycle1_schedule_enabled == 'on' and
        #             cycle1_runs_tomorrow %}
        #       {{ 'Tomorrow at ' + cycle1_start_time }}
        #     {% elif cycle2_schedule_enabled == 'on' and
        #             cycle2_runs_tomorrow %}
        #         {{ 'Tomorrow at ' + cycle2_start_time }}
        #     {% else %}
        #       NOTHING SCHEDULED
        #     {% endif %}
        #   {% endif %}


# #===================
# #=== Binary Sensors
# #===================
# binary_sensor:
#   - platform: template
#     sensors:
#       #=== Indicate if a cycle is scheduled to start before another will finish
#       irrigation_cycle_start_clash:
#         friendly_name: Cycle Start Clash
#         value_template: >
#           {% set c1_start = states('sensor.irrigation_cycle1_start_time_in_seconds') | int(0) %}
#           {% set c1_duration = states('sensor.irrigation_cycle1_duration_in_seconds') | int(0) %}
#           {% set c1_end = c1_start + c1_duration %}
#           {% set c2_start = states('sensor.irrigation_cycle2_start_time_in_seconds') | int(0) %}
#           {% set c2_duration = states('sensor.irrigation_cycle2_duration_in_seconds') | int(0) %}
#           {% set c2_end = c2_start + c2_duration %}

#           {% if is_state('input_boolean.irrigation_cycle1_schedule_enabled', 'on') and
#                 is_state('input_boolean.irrigation_cycle2_schedule_enabled', 'on') %}
#             {% if (c1_start - c2_start) | abs <= 60 %}
#               true
#             {% elif c1_start < c2_start and
#                     c1_end > (c2_start - 60) %}
#               true
#             {% elif c2_start < c1_start and
#                     c2_end > (c1_start - 60) %}
#               true
#             {% else %}
#               false
#             {% endif %}
#           {% else %}
#             false
#           {% endif %}
#         attribute_templates:
#           clash_text: >
#             {% set c1_start = states('sensor.irrigation_cycle1_start_time_in_seconds') | int(0) %}
#             {% set c1_duration = states('sensor.irrigation_cycle1_duration_in_seconds') | int(0) %}
#             {% set c1_end = c1_start + c1_duration %}
#             {% set c2_start = states('sensor.irrigation_cycle2_start_time_in_seconds') | int(0) %}
#             {% set c2_duration = states('sensor.irrigation_cycle2_duration_in_seconds') | int(0) %}
#             {% set c2_end = c2_start + c2_duration %}
#             {% set c1_name = states('input_text.irrigation_cycle1_name') %}
#             {% set c2_name = states('input_text.irrigation_cycle2_name') %}

#             {# NOTE that a 1 minute gap between cycles is required #}
#             {% if (c1_start - c2_start) | abs <= 60 %}
#               You have set {{ c1_name }} to start at the same time as {{ c2_name }}.
#             {% elif c1_start < c2_start and
#                     c1_end > (c2_start - 60) %}
#               You have set {{ c2_name }} to start before {{ c1_name }} has ended.<br><br>{{ c2_name }} will not run.
#             {% elif c2_start < c1_start and
#                     c2_end > (c1_start - 60) %}
#               You have set {{ c1_name }} to start before {{ c2_name }} has ended.<br><br>{{ c1_name }} will not run.
#             {% else %}
#               No timing errors found! Please check code...
#             {% endif %}
#         availability_template: >
#           {% set temp_sensors = expand(
#             "sensor.irrigation_cycle1_start_time_in_seconds",
#             "sensor.irrigation_cycle1_duration_in_seconds",
#             "sensor.irrigation_cycle2_start_time_in_seconds",
#             "sensor.irrigation_cycle2_duration_in_seconds",
#           ) %}
#           {{ temp_sensors | selectattr('state','in', ['unknown','unavailable'])
#                           | list
#                           | length != (temp_sensors | count) }}
