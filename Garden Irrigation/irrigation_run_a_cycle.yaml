
#============
#=== Scripts
#============
script:

  #================================================
  #=== Run A Cycle
  #===
  #=== Passed
  #===  cycle - [cycle1, cycle2, cycle3]
  #================================================
  irrigation_run_a_cycle:
    alias: Irrigation Run A Cycle
    description: Run An Irrigation Cycle
    fields: 
      cycle:
        description: Cycle to run
        example: cycle1

    sequence:
      #=== Short pause before starting
      - delay:
          seconds: 1

      #=== Run all the zones in turn
      - repeat:
          until:
            - condition: template
              value_template: >
                {{ states('input_number.irrigation_number_of_zones') | int == repeat.index }}

          sequence:
            #=== Write To Log
            - service: script.irrigation_write_to_log
              data:
                log_event: ZONE_STARTING
                zone: >
                  {{ repeat.index }}
                seconds: >
                  {{ states('sensor.irrigation_' ~ cycle ~ '_zone' ~ repeat.index ~ '_actual_duration_in_seconds') | int }}
                event_time: >
                  {{ now() }}

            - choose:
                #=== If duration for this zone is not zero
                - conditions:
                    condition: template
                    value_template: >
                      {{ states('sensor.irrigation_' ~ cycle ~ '_zone' ~ repeat.index ~ '_actual_duration_in_seconds') | int != 0 }}

                  sequence:
                    #=== Set FAILSAFE time to 10 seconds longer than the zone runtime
                    - service: input_number.set_value
                      data_template:        
                        entity_id: input_number.irrigation_failsafe_time_in_seconds
                        value: >
                          {{ states('sensor.irrigation_' ~ cycle ~ '_zone' ~ repeat.index ~ '_actual_duration_in_seconds') | int + 10 }}

                    #=== Write To Log
                    - service: script.irrigation_write_to_log
                      data:
                        log_event: FAILSAFE_SET
                        zone: >
                          {{ repeat.index }}
                        event_time: >
                          {{ now() }}

                    #=== Update Status with Zone being watered
                    - service: input_text.set_value
                      data_template:
                        entity_id: input_text.irrigation_current_status
                        value: Watering...

                    #=== Update last run details for this zone
                    - service: input_text.set_value
                      data_template:
                        entity_id: >
                          input_text.irrigation_zone{{ repeat.index }}_previous_duration_in_seconds
                        value: >
                            Watering

                    #=== Is the controller unavailable and the switches are not disabled (used when testing)?
                    - choose:
                        #=== Controller is unavailable and switches are not disabled
                        - conditions:
                            - condition: template
                              value_template: >
                                {{ states(states('input_text.irrigation_external_sensor_controller_wifi')) == 'unavailable' }}

                            - condition: state
                              entity_id: input_boolean.irrigation_disable_switches
                              state:  'off'
      
                          sequence:
                            #=== Update Status
                            - service: input_text.set_value
                              data:
                                entity_id: input_text.irrigation_current_status
                                value: Waiting for offline controller...
        
                            #=== Give controller a chance to become available
                            - delay: 
                                seconds: >
                                  {{ states('input_number.irrigation_controller_offline_wait') | int }}

                    #=== Start the timer
                    - service: timer.start
                      data_template:
                        entity_id: >
                          timer.irrigation_zone{{ repeat.index }}_timer
                        duration: >
                          {{ states('sensor.irrigation_' ~ cycle ~ '_zone' ~ repeat.index ~ '_actual_duration_in_seconds') | int }}

                    #=== Write To Log
                    - service: script.irrigation_write_to_log
                      data:
                        log_event: ZONE_WATERING
                        zone: >
                          {{ repeat.index }}
                        event_time: >
                          {{ now() }}

                    #=== Wait for the timer to start (Probably unnecessary but...)
                    - wait_template: >
                        {% set entity_id = 'timer.irrigation_zone' ~ repeat.index ~ '_timer' %}
                        {{ is_state(entity_id, 'active') }}

                    #=== If switches are not disabled (used when testing)
                    - choose:
                      - conditions:
                          condition: state
                          entity_id: input_boolean.irrigation_disable_switches
                          state:  'off'

                        sequence:
                          #=== Start watering
                          - service: switch.turn_on
                            data_template:
                              entity_id: >
                                {{ states('input_text.irrigation_zone' ~ repeat.index ~ '_switch_entity_id') }}

                    #=== Wait for the timer to end
                    #===
                    #=== As of v2022.04 timers resume after a restart so this would be better than a wait_template
                    # - wait_for trigger:
                    #     - platform: event
                    #       event_type: timer.finished
                    #       event_data:
                    #         entity_id: >
                    #           {{ 'timer.irrigation_zone' ~ repeat.index ~ '_timer' }}

                    - wait_template: >
                        {% set entity_id = 'timer.irrigation_zone' ~ repeat.index ~ '_timer' %}
                        {{ is_state(entity_id, 'idle') }}

                    #=== Stop Watering
                    - service: switch.turn_off
                      data_template:
                        entity_id: >
                          {{ states('input_text.irrigation_zone' ~ repeat.index ~ '_switch_entity_id') }}

                    #=== Write To Log
                    - service: script.irrigation_write_to_log
                      data:
                        log_event: ZONE_STOPPING
                        zone: >
                          {{ repeat.index }}
                        event_time: >
                          {{ now() }}

                    #=== Update last run time for this zone
                    - service: input_text.set_value
                      data_template:
                        entity_id: >
                          input_text.irrigation_zone{{ repeat.index }}_previous_duration_in_seconds
                        value: >
                          {% set duration = states('sensor.irrigation_' ~ cycle ~ '_zone' ~ repeat.index ~ '_actual_duration_in_seconds') %}
                          {% set today = now().strftime('%a') | lower %}

                          {% if cycle == 'cycle3' or
                                is_state('input_boolean.irrigation_' ~ cycle ~ '_zone' ~ repeat.index ~ '_every_day', 'on') or
                                is_state('input_boolean.irrigation_' ~ cycle ~ '_zone' ~ repeat.index ~ '_' ~ today, 'on' ) %}
                            {{ duration }}
                          {% else %}
                            Not scheduled today ({{ today.title() }})
                          {% endif %}

                    #=== Update last run total watering time
                    - service: input_text.set_value
                      data_template:
                        entity_id: >
                          input_text.irrigation_previous_total_watering_time
                        value: >
                          {% set duration = states('sensor.irrigation_' ~ cycle ~ '_zone' ~ repeat.index ~ '_actual_duration_in_seconds') | int %}
                          {% set current_total = states('input_text.irrigation_previous_total_watering_time') | float %}

                          {{ (current_total + duration) | string }}

                    #=== Update Status
                    - service: input_text.set_value
                      data:
                        entity_id: input_text.irrigation_current_status
                        value: Changing Zone...

                    #=== Pause between zones (to allow HA state machine to stabalise and the physical valves to reset)
                    - delay:
                        seconds: >
                            {{ states('input_number.irrigation_pause_between_zones_in_seconds') | int }}

      #=== CYCLE END PROCESSING
      - service: input_boolean.turn_off
        data_template:
          entity_id: >
            input_boolean.irrigation_{{ cycle }}_running

      #=== If 'Today Only' is on turn off schedule and reset 'Today Only'
      - choose:
          - conditions:
              condition: template
              value_template: >
                {{ is_state('input_boolean.irrigation_' + cycle + '_schedule_today_only', 'on') }}
            sequence:
              - service: homeassistant.turn_off
                data:
                  entity_id:
                    - input_boolean.irrigation_{{ cycle }}_schedule_today_only
                    - input_boolean.irrigation_{{ cycle }}_schedule_enabled

      #=== Update Status to Idle
      - service: input_text.set_value
        data:
          entity_id: input_text.irrigation_current_status
          value: SYSTEM IDLE

      #=== Write To Log
      - service: script.irrigation_write_to_log
        data:
          log_event: CYCLE_ENDED
          cycle: >
            {{ cycle[-1] }}
          event_time: >
            {{ now() }}

